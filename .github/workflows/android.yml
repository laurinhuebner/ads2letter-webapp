name: Android APK

on:
  workflow_dispatch:
  push:
    branches: [ main ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '17'

      - name: Cache Gradle
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: ${{ runner.os }}-gradle-

      # Debug-APK (unsiged) â€“ reicht zum Testen und Installieren via "Unbekannte Apps zulassen"
      - name: Build Debug APK
        working-directory: app
        run: ../gradlew assembleDebug

      - name: Upload debug apk
        uses: actions/upload-artifact@v4
        with:
          name: app-debug
          path: app/build/outputs/apk/debug/*.apk

      # --- OPTIONAL: Release APK mit Signierung ---
      # Damit das klappt, musst du 4 Secrets in den Repo Settings anlegen:
      # ANDROID_KEYSTORE_BASE64, ANDROID_KEYSTORE_PASSWORD, ANDROID_KEY_ALIAS, ANDROID_KEY_PASSWORD
      - name: Prepare keystore
        if: ${{ secrets.ANDROID_KEYSTORE_BASE64 != '' }}
        run: |
          echo "$ANDROID_KEYSTORE_BASE64" | base64 -d > android_keystore.jks
        env:
          ANDROID_KEYSTORE_BASE64: ${{ secrets.ANDROID_KEYSTORE_BASE64 }}

      - name: Create signing config
        if: ${{ secrets.ANDROID_KEYSTORE_BASE64 != '' }}
        run: |
          cat > app/signing-config.gradle <<'EOF'
          android {
            signingConfigs {
              release {
                storeFile file(rootProject.file("android_keystore.jks"))
                storePassword System.getenv("ANDROID_KEYSTORE_PASSWORD")
                keyAlias System.getenv("ANDROID_KEY_ALIAS")
                keyPassword System.getenv("ANDROID_KEY_PASSWORD")
              }
            }
            buildTypes {
              release {
                signingConfig signingConfigs.release
                minifyEnabled false
                shrinkResources false
              }
            }
          }
          EOF

      - name: Inject signing into build.gradle
        if: ${{ secrets.ANDROID_KEYSTORE_BASE64 != '' }}
        run: |
          if ! grep -q "apply from: rootProject.file('signing-config.gradle')" app/build.gradle; then
            echo -e "\napply from: rootProject.file('signing-config.gradle')" >> app/build.gradle
          fi

      - name: Build Release APK (signed)
        if: ${{ secrets.ANDROID_KEYSTORE_BASE64 != '' }}
        working-directory: app
        env:
          ANDROID_KEYSTORE_PASSWORD: ${{ secrets.ANDROID_KEYSTORE_PASSWORD }}
          ANDROID_KEY_ALIAS: ${{ secrets.ANDROID_KEY_ALIAS }}
          ANDROID_KEY_PASSWORD: ${{ secrets.ANDROID_KEY_PASSWORD }}
        run: ../gradlew assembleRelease

      - name: Upload release apk
        if: ${{ secrets.ANDROID_KEYSTORE_BASE64 != '' }}
        uses: actions/upload-artifact@v4
        with:
          name: app-release
          path: app/build/outputs/apk/release/*.apk
